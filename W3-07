#include <iostream>
#include<ctime>
using namespace std;
class RationalNumber
{
	/*
	This class is designed to represent Rational Number objects.
	A rational number is a number of the form a/b with integers
	a and b such that b is different from 0.
	*/
private:
	int a, b;
public:
	//Constructors
	RationalNumber();
	RationalNumber(int, int);

	//Getters
	int getNumerator();
	int getDenominator();

	//Setters
	void setNumerator(int num);
	void setDenominator(int denom);

	//Additional member functions
	double toDouble();
	void standardize();
	void reduce();
	void print();
};

//Constructors
RationalNumber::RationalNumber()
{
	//As a default object, let us construct 0/1 rational number
	a = 0;
	b = 1;
}

RationalNumber::RationalNumber(int num, int denom)
{
	//If the denominator parameter is 0, ignore it and use 1
	a = num;
	b = denom != 0 ? denom : 1;
	//Now that the object is created, standardize and reduce it
	standardize();
	reduce();
}

//Getters
int RationalNumber::getNumerator()
{
	return a;
}
int RationalNumber::getDenominator()
{
	return b;
}

//Setters
void RationalNumber::setNumerator(int num)
{
	a = num;
	//Now that numerator of an existing object is modified,
	//standardize it and reduce it
	standardize();
	reduce();
}
void RationalNumber::setDenominator(int denom)
{
	//If the denominator parameter is 0, ignore it and use 1
	b = denom != 0 ? denom : 1;
	//Now that denominator of an existing object is modified,
	//standardize it and reduce it
	standardize();
	reduce();
}

//Additional member functions
double RationalNumber::toDouble()
{
	return static_cast<double>(a) / b;
}
void RationalNumber::standardize()
{
	if (b < 0)
	{
		a *= -1;
		b *= -1;
	}
}
void RationalNumber::reduce()
{
	if (a == 0)
	{
		b = 1;
		return;
	}
	else
	{
		//Remeber that the denominator is NEVER zero by design
		//Therefore here both numerator and denominator are non-zero.
		int m = abs(a);
		int n = abs(b);
		int gcd = m < n ? m : n;
		while (gcd > 0)
		{
			if (m % gcd == 0 && n % gcd == 0)
				break;
			gcd--;
		}
		a /= gcd;
		b /= gcd;
	}
}
void RationalNumber::print()
{
	cout << a << "/" << b;
}

int main()
{
	srand(time(0));
	int size;
	cout << "enter the size of the array" << endl;
	cin >> size;
	int numerator, denominator;
	RationalNumber* arr = new RationalNumber[size];
	double max = -6;
	double min = 6;
	for (int i = 0; i < size; i++)
	{
		int a = rand() % 11 - 5;
		int b = rand() % 11 - 5;
		
		while (b == 0)
		{
			b = rand() % 11 - 5;
		}
		arr[i].setNumerator(a);
		arr[i].setDenominator(b);
		double computedNumber = a / b;
		arr[i].print();
		cout << " ";
		if (computedNumber > max)
		{
			max = computedNumber;
		}
		if (computedNumber < min)
		{
			min = computedNumber;
		}

	}
	cout << endl;
	cout << max << " " << min;

	system("Pause");
	return 0;
}
